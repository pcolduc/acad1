package car;

public class Car {
    int wheel = 4;
    /*
    * 생성자 (Constructor)
    * - new 클래스명()
    * - 직접 선언하지 않아도 기본 생성자가 자동으로 생성된다
    * - 생성자를 통해 갹체 변수를 초기화 한다는 것은, 단순히 어떠한 값을 초기화 한다는
    * 뜻이 아닌 필드와 메서드를 호출한는 등 객체를 사용하기 위해서는 객체변수가
    * 메모리에 올라가야 하는데 이렇게 메모리에 객체 변수를 올려주는 역할을 생성자가 하고 있음
    * */
    public Car(){

    }
    /*메소드
    * -리턴값이 없는경우 void
    * -리턴값이 있는경우 해당 자료형을 반환
    * 형식)
    * void print(){
    * 코드
    * }
    *
    * int a(){
    *       코드
    *   return 변수;
    * }
    *
    * 절차지향 구성요소 : 함수
    *         접근제어: 없음
    *         다형성  : 불가능
    *         상속   : 불가능
    *         보안성 : 낮음
    *
    * 객체지향 구성요소 :객체
    *         접근제어: 있음 public등
     *         다형성  : 가능
     *         상속   : 가능
     *         보안성 : 높음
     *
     * 객체지향 프로그래밍의 주요 특징
     * - 추상화, 캡슐화, 상속성, 다형성
     *
     * 추상화 : 필요한 정보만을 중심으로 간소화하는 것
     * 캡슐화 : 외부에 드러나지 않도록 어떠한 정보를 은닉하는 것
     * 상속성 : 부모 자식관계 하위클래스가 상위 클래스 의 기능을 사용 할 수 있다
     * 다형성 : 하느의 클래스나 메서드가 다양한 방식으로 동작이 가능한 것
     *
     * 오버라이딩 :상속관계에서 자식클래스 에서 부모클래스의 메소드와 같은 이름을 사용하고 매개변수와 리턴타입도
     * 같은 상태에서 기능을 재정의 하는것
     *
     * 오버로딩 : 같은 이름의 함수를 매개변수를 다르게 하여 기능을 재정의 하는것
     *
     * 클래스 구성
     * - 클래스 내부에는 필드, 생성자, 메소드가있다
     *
     * 필드: 객체의 데이터 메소드의 반환값을 저장(멤버변수
     * 생성자 : 생성자는 객체를 생성할 때 new연산자를 사용
     *
     * */
    void ride(){
        System.out.println("달린다.");
    }
    void stop(){
        System.out.println("멈춘다.");
    }
}
